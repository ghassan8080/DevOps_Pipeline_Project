pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        CLUSTER_NAME = 'microservice-cluster'
        NAMESPACE = 'microservices'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ghassan8080/DevOps_Pipeline_Project.git', branch: 'main'
            }
        }

        stage('Install AWS CLI') {
            steps {
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh 'unzip -o awscliv2.zip'
                script {
                    try {
                        sh './aws/install -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin'
                    } catch (Exception e) {
                        echo "AWS CLI already exists, updating..."
                        sh './aws/install --update -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin'
                    }
                    env.PATH = "${env.WORKSPACE}/aws-cli/bin:${env.PATH}"
                }
            }
        }

        stage('Verify AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }

        stage('Install EKSCTL') {
            steps {
                sh 'curl -sL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp'
                sh 'chmod +x /tmp/eksctl'
            }
        }

        stage('Install Kubectl') {
            steps {
                sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                sh 'chmod +x kubectl'
                sh 'mkdir -p ${WORKSPACE}/kubectl-bin'
                sh 'mv kubectl ${WORKSPACE}/kubectl-bin/'
                script {
                    env.PATH = "${env.WORKSPACE}/kubectl-bin:${env.PATH}"
                }
            }
        }

        stage('Check Existing Cluster') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def clusterExists = sh(
                            script: "aws eks describe-cluster --name ${CLUSTER_NAME} --region ${AWS_REGION}",
                            returnStatus: true
                        )
                        if (clusterExists == 0) {
                            echo "Cluster ${CLUSTER_NAME} already exists"
                            env.CLUSTER_EXISTS = 'true'
                        } else {
                            echo "Cluster ${CLUSTER_NAME} does not exist"
                            env.CLUSTER_EXISTS = 'false'
                        }
                    }
                }
            }
        }

        stage('Create EKS Cluster') {
            when {
                environment name: 'CLUSTER_EXISTS', value: 'false'
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh """
                        /tmp/eksctl create cluster \
                            --name ${CLUSTER_NAME} \
                            --region ${AWS_REGION} \
                            --node-type t3.medium \
                            --nodes 2 \
                            --nodes-min 1 \
                            --nodes-max 3 \
                            --with-oidc \
                            --managed
                    """
                }
            }
        }

        stage('Update Kubeconfig') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}'
                }
            }
        }

        stage('Create Namespace') {
            steps {
                sh 'kubectl apply -f kubernetes/namespace.yaml || true'
            }
        }

        stage('Verify Cluster') {
            steps {
                sh """
                    kubectl get nodes
                    kubectl get namespaces
                """
            }
        }
    }

    post {
        success {
            echo 'EKS Cluster created/verified successfully!'
        }
        failure {
            echo 'EKS Cluster setup failed!'
        }
    }
}