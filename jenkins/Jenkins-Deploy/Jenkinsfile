pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        CLUSTER_NAME = 'microservice-cluster'
        NAMESPACE = 'microservices'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ghassan8080/DevOps_Pipeline_Project.git', branch: 'main'
            }
        }

        stage('Install AWS CLI') {
            steps {
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh 'unzip -o awscliv2.zip'
                script {
                    try {
                        sh './aws/install -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin'
                    } catch (Exception e) {
                        echo "AWS CLI already exists, updating..."
                        sh './aws/install --update -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin'
                    }
                    env.PATH = "${env.WORKSPACE}/aws-cli/bin:${env.PATH}"
                }
            }
        }

        stage('Install Kubectl') {
            steps {
                sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                sh 'chmod +x kubectl'
                sh 'mkdir -p ${WORKSPACE}/kubectl-bin'
                sh 'mv kubectl ${WORKSPACE}/kubectl-bin/'
                script {
                    env.PATH = "${env.WORKSPACE}/kubectl-bin:${env.PATH}"
                }
            }
        }

        stage('Verify AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }

        stage('Update Kubeconfig') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}'
                }
            }
        }

        stage('Create Namespace') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/namespace.yaml'
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/mysql-deployment.yaml'
                }
            }
        }

        stage('Deploy PHP-Apache') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/php-apache-deployment.yaml'
                }
            }
        }

        stage('Deploy PHPMyAdmin') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/phpmyadmin-deployment.yaml'
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/prometheus-deployment.yaml'
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl apply -f kubernetes/grafana-deployment.yaml'
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'kubectl get all -n ${NAMESPACE}'
                }
            }
        }
    }

    post {
        success {
            echo 'Applications deployed successfully!'
        }
        failure {
            echo 'Application deployment failed!'
        }
    }
}
