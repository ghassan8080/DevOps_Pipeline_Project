pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        CLUSTER_NAME = 'microservice-cluster'
        EKSCTL_PATH = "${WORKSPACE}/eksctl"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ghassan8080/DevOps-Pipeline.git', branch: 'main'
            }
        }

        stage('Install eksctl') {
            steps {
                sh '''
                    echo "=== Installing eksctl ==="
                    # تحميل وفك ضغط eksctl
                    curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                    # منح الصلاحيات والنقل إلى مسار العمل
                    chmod +x /tmp/eksctl
                    mv /tmp/eksctl ${EKSCTL_PATH}
                    # التحقق من التثبيت
                    ${EKSCTL_PATH} version
                '''
            }
        }

        stage('Install AWS CLI') {
            steps {
                sh '''
                    echo "=== Installing AWS CLI ==="
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip -o awscliv2.zip
                    ./aws/install -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin
                '''
                script {
                    env.PATH = "${env.WORKSPACE}/aws-cli/bin:${env.PATH}"
                }
            }
        }

        stage('Verify AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }

        stage('Check Cluster Existence') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def clusterExists = sh(
                            script: "aws eks describe-cluster --name ${CLUSTER_NAME} --region ${AWS_REGION}",
                            returnStatus: true
                        )
                        if (clusterExists == 0) {
                            echo "Cluster ${CLUSTER_NAME} exists and will be deleted"
                            env.CLUSTER_EXISTS = 'true'
                        } else {
                            echo "Cluster ${CLUSTER_NAME} does not exist"
                            env.CLUSTER_EXISTS = 'false'
                        }
                    }
                }
            }
        }

        stage('Delete EKS Cluster') {
            when {
                environment name: 'CLUSTER_EXISTS', value: 'true'
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh '''
                        echo "=== Deleting EKS Cluster ==="
                        ${EKSCTL_PATH} delete cluster --name ${CLUSTER_NAME} --region ${AWS_REGION} --wait
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'EKS Cluster deleted successfully!'
        }
        failure {
            echo 'EKS Cluster deletion failed!'
        }
    }
}
