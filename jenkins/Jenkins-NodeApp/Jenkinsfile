pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-2"
        CLUSTER_NAME = "microservice-cluster"
        NAMESPACE = "microservices"
        DOCKER_REGISTRY = "ghassan8080"  // اسم مستخدم Docker Hub الخاص بك
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/node-monitoring-app:${BUILD_NUMBER}"
    }

    stages {
        stage("Checkout") {
            steps {
                git url: "https://github.com/ghassan8080/DevOps_Pipeline_Project.git", branch: "main"
            }
        }

        stage("Install AWS CLI") {
            steps {
                sh "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\""
                sh "unzip -o awscliv2.zip"
                script {
                    try {
                        sh "./aws/install -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin"
                    } catch (Exception e) {
                        echo "AWS CLI already exists, updating..."
                        sh "./aws/install --update -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin"
                    }
                    env.PATH = "${env.WORKSPACE}/aws-cli/bin:${env.PATH}"
                }
            }
        }

        stage("Install Kubectl") {
            steps {
                sh "curl -LO \"https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\""
                sh "chmod +x kubectl"
                sh "mkdir -p ${WORKSPACE}/kubectl-bin"
                sh "mv kubectl ${WORKSPACE}/kubectl-bin/"
                script {
                    env.PATH = "${env.WORKSPACE}/kubectl-bin:${env.PATH}"
                }
            }
        }

        stage("Install Docker") {
            steps {
                script {
                    try {
                        // محاولة تثبيت Docker بدون استخدام su
                        sh """
                            # تثبيت Docker
                            curl -fsSL https://get.docker.com -o get-docker.sh
                            # تعديل سكربت التثبيت لتجنب استخدام su
                            sed -i 's|su -c|apt-get -y|g' get-docker.sh
                            sh get-docker.sh
                            # بدء خدمة Docker
                            service docker start || true
                            # إضافة المستخدم jenkins إلى مجموعة docker
                            usermod -aG docker jenkins || true
                            # التحقق من تثبيت Docker
                            docker --version || echo "Docker not available in this step"
                        """
                    } catch (Exception e) {
                        echo "Docker installation failed: ${e.getMessage()}"
                        echo "Continuing with pipeline..."
                        // تعيين متغير للإشارة إلى فشل تثبيت Docker
                        env.DOCKER_INSTALL_FAILED = "true"
                    }
                }
            }
        }

        stage("Verify AWS Credentials") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "aws sts get-caller-identity"
                }
            }
        }

        stage("Update Kubeconfig") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}"
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    try {
                        dir("node-app") {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.getMessage()}"
                        echo "Continuing with pipeline..."
                        // تعيين متغير للإشارة إلى فشل بناء Docker
                        env.DOCKER_BUILD_FAILED = "true"
                    }
                }
            }
        }

        stage("Push Docker Image") {
            steps {
                script {
                    // التحقق من نجاح تثبيت Docker وبناء الصورة
                    if (env.DOCKER_INSTALL_FAILED == "true" || env.DOCKER_BUILD_FAILED == "true") {
                        echo "Skipping Docker push due to installation or build failure"
                        currentBuild.result = 'UNSTABLE'
                        return
                    }

                    try {
                        // تسجيل الدخول إلى سجل Docker
                        withCredentials([usernamePassword(credentialsId: "docker-registry-credentials", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASSWORD")]) {
                            sh "docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}"
                        }
                        // دفع الصورة إلى السجل
                        sh "docker push ${DOCKER_IMAGE}"
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage("Update Node App Deployment") {
            steps {
                script {
                    // التحقق من نجاح تثبيت Docker وبناء الصورة ودفعها
                    if (env.DOCKER_INSTALL_FAILED == "true" || env.DOCKER_BUILD_FAILED == "true") {
                        echo "Skipping deployment update due to Docker installation or build failure"
                        echo "Using default image for deployment"
                        // استخدام صورة افتراضية متاحة
                        sh "sed -i 's|your-docker-repo/node-monitoring-app:latest|node:alpine|g' kubernetes/node-app-deployment.yaml"
                    } else {
                        // تحديث ملف النشر لاستخدام الصورة الجديدة
                        sh "sed -i \"s|your-docker-repo/node-monitoring-app:latest|${DOCKER_IMAGE}|g\" kubernetes/node-app-deployment.yaml"
                    }
                }
            }
        }

        stage("Deploy Node App") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "kubectl apply -f kubernetes/node-app-deployment.yaml"
                }
            }
        }

        stage("Deploy Node Exporter") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "kubectl apply -f kubernetes/node-exporter-deployment.yaml"
                }
            }
        }

        stage("Deploy AlertManager") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "kubectl apply -f kubernetes/alertmanager-deployment.yaml"
                }
            }
        }

        stage("Update Prometheus Configuration") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "kubectl apply -f kubernetes/prometheus-deployment.yaml"
                    // Mount the rules configmap to Prometheus deployment
                    sh "kubectl patch deployment prometheus -n microservices --type=json -p='[{"op": "add", "path": "/spec/template/spec/volumes/0", "value": {"name": "prometheus-rules", "configMap": {"name": "prometheus-rules"}}}]'"
                    sh "kubectl patch deployment prometheus -n microservices --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/volumeMounts/2", "value": {"name": "prometheus-rules", "mountPath": "/etc/prometheus/rules"}}]'"
                    // Update Prometheus args to include rules
                    sh "kubectl patch deployment prometheus -n microservices --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/5", "value": "--rule.file=/etc/prometheus/rules/alert_rules.yml"}]'"
                }
            }
        }

        stage("Deploy Ingress") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    // Install NGINX Ingress Controller if not already installed
                    sh "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml || echo 'Ingress Controller might already be installed'"
                    // Apply our ingress configuration
                    sh "kubectl apply -f kubernetes/monitoring-ingress.yaml"
                    // Wait for ingress to be ready
                    sh "kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=controller -n ingress-nginx --timeout=300s || echo 'Ingress Controller wait timeout, continuing...'"
                }
            }
        }

        stage("Verify Deployment") {
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "aws-credentials"]]) {
                    sh "kubectl get pods -n ${NAMESPACE} | grep node-app"
                    sh "kubectl get services -n ${NAMESPACE} | grep node-app"
                    sh "kubectl get ingress -n ${NAMESPACE} | grep monitoring"
                }
            }
        }

        stage("Access Application") {
            steps {
                echo "Node.js Monitoring App deployed successfully!"
                echo "Access the application at: http://<ingress-controller-url>/"
                echo "Access metrics at: http://<ingress-controller-url>/node-app/metrics"
                echo "Access Prometheus at: http://<ingress-controller-url>/prometheus"
                echo "Access Grafana at: http://<ingress-controller-url>/grafana"
                echo "Access AlertManager at: http://<ingress-controller-url>/alertmanager"
                echo "Note: Replace <ingress-controller-url> with your actual Ingress Controller external IP or domain name"
                echo "To get the Ingress Controller external IP, run: kubectl get svc ingress-nginx-controller -n ingress-nginx"
            }
        }
    }

    post {
        success {
            echo "Node.js application deployed successfully!"
        }
        failure {
            echo "Node.js application deployment failed!"
        }
        always {
            echo "Pipeline completed!"
            // تنظيف الموارد
            script {
                try {
                    // التحقق من وجود Docker قبل محاولة استخدامه
                    sh "command -v docker >/dev/null 2>&1 && { docker logout ${DOCKER_REGISTRY}; docker rmi ${DOCKER_IMAGE} || true; } || echo 'Docker not available, skipping cleanup'"
                } catch (Exception e) {
                    echo "Docker cleanup failed: ${e.getMessage()}"
                }
            }
        }
    }
}